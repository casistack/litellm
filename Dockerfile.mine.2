# =============================================
# Build Arguments
# =============================================
# Base image for building
ARG LITELLM_BUILD_IMAGE=python:3.13.1-slim
# Runtime image
ARG LITELLM_RUNTIME_IMAGE=python:3.13.1-slim

# =============================================
# Builder Stage
# =============================================
FROM $LITELLM_BUILD_IMAGE as builder

# Set the working directory
WORKDIR /app

# Install system build dependencies
RUN apt-get clean && apt-get update && \
    apt-get install -y gcc python3-dev && \
    rm -rf /var/lib/apt/lists/*

# Install Python build tools
RUN pip install --upgrade pip && \
    pip install build

# Copy application files
COPY . .

# First Admin UI Build
RUN chmod +x docker/build_admin_ui.sh && ./docker/build_admin_ui.sh

# Build Python package
RUN rm -rf dist/* && python -m build
RUN ls -1 dist/*.whl | head -1
RUN pip install dist/*.whl

# Install and prepare dependencies
# Create wheels for all requirements
RUN pip wheel --no-cache-dir --wheel-dir=/wheels/ -r requirements.txt

# Install semantic-cache (Experimental)
# Note: Separate install due to pydantic version conflict
RUN pip install redisvl==0.0.7 --no-deps

# JWT setup - ensure correct version is used
RUN pip uninstall jwt -y && \
    pip uninstall PyJWT -y && \
    pip install PyJWT==2.9.0 --no-cache-dir

# Second Admin UI Build
RUN chmod +x docker/build_admin_ui.sh && ./docker/build_admin_ui.sh

# =============================================
# Runtime Stage
# =============================================
FROM $LITELLM_RUNTIME_IMAGE as runtime

# Security updates
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y nano && \
    rm -rf /var/lib/apt/lists/* 

# Setup application directory
WORKDIR /app
RUN mkdir /app/config

# Copy application files
COPY . .
RUN ls -la /app

# Copy built artifacts from builder stage
COPY --from=builder /app/dist/*.whl .
COPY --from=builder /wheels/ /wheels/

# Install application and dependencies
RUN pip install *.whl /wheels/* --no-index --find-links=/wheels/ && \
    rm -f *.whl && \
    rm -rf /wheels

# Final setup steps
RUN prisma generate
RUN chmod +x docker/entrypoint.sh

# =============================================
# Container Configuration
# =============================================
EXPOSE 4000/tcp

ENTRYPOINT ["litellm"]

# Custom configuration with detailed debugging
CMD ["--config", "/app/config/config.yaml", \
     "--detailed_debug", \
     "--port", "4000", \
     "--num_workers", "4"]
